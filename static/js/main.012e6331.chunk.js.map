{"version":3,"sources":["config.js","lib/options.js","components/data-entry/data-entry.js","components/scenarios/scenarios.js","lib/calc-util.js","lib/scenario-runner.js","App.js","serviceWorker.js","index.js"],"names":["config","Object","freeze","DEFAULT_AGE","MIN_AGE","MAX_AGE","DEFAULT_GENDER","GENDER","key","value","lifeExpectancy","DEFAULT_MARITAL_STATUS","MARITAL_STATUS","label","DEFAULT_RRSP","MIN_RRSP","MAX_RRSP","DEFAULT_ANNUAL_CPP","MIN_ANNUAL_CPP","MAX_ANNUAL_CPP","DEFAULT_ANNUAL_PENSION","MIN_ANNUAL_PENSION","MAX_ANNUAL_PENSION","DEFAULT_RETIREMENT_AGE","MIN_RETIREMENT_AGE","MAX_RETIREMENT_AGE","generateNumericOptions","from","to","result","i","push","generateStringOptions","configKey","forEach","ck","ageOptions","genderOptions","martialStatusOptions","retirementAgeOptions","createSelection","opts","map","opt","react_default","a","createElement","DataEntry","state","age","gender","maritalStatus","rrsp","cpp","pension","retirementAge","update","field","evt","preventDefault","_this","setState","defineProperty","target","submitInput","event","runScenarios","props","_this$state","this","className","onSubmit","htmlFor","id","name","onChange","type","min","max","Component","Scenarios","data","cashOutBefore","cashOutAfter","numYrsInRetirement","annualIncome","monthlyGis","annualGIS","totalGisInRetirement","helper","yearsInRetirement","input","find","el","annualIncomeForGisEligibilityWithRrsp","annualRrsp","gisStatus","gisLookup","STATUS","SINGLE","convertMaritalStatus","gisResult","parseFloat","output","gis","monthlyGisAmt","annualGISAmt","numYearsInRetirement","convertToNumeric","parseInt","income","calculateCashOutBeforeRetirement","inp","calcUtil","calculateCashOutAfterRetirement","App","_useState","useState","_useState2","slicedToArray","scenarios","setScenarios","data_entry_data_entry","scenarioResult","run","console","log","components_scenarios_scenarios","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iYAmDeA,EAnDAC,OAAOC,OAAO,CAC3BC,YAAa,GACbC,QAAS,GACTC,QAAS,GAGTC,eAAgB,SAChBC,OAAQ,CACN,CAAEC,IAAK,OAAQC,MAAO,OAAQC,eAAgB,IAC9C,CAAEF,IAAK,SAAUC,MAAO,SAAUC,eAAgB,KAIpDC,uBAAwB,SACxBC,eAAgB,CACd,CAAEJ,IAAK,SAAUC,MAAO,SAAUI,MAAO,WAmB3CC,aAAc,IACdC,SAAU,EACVC,SAAU,IAEVC,mBAAoB,IACpBC,eAAgB,EAChBC,eAAgB,KAEhBC,uBAAwB,EACxBC,mBAAoB,EACpBC,mBAAoB,IAEpBC,uBAAwB,GACxBC,mBAAoB,GACpBC,mBAAoB,KC9CtB,SAASC,EAAuBC,EAAMC,GAEpC,IADA,IAAMC,EAAS,GACNC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAOE,KAAK,CACVvB,IAAKsB,EACLrB,MAAOqB,EACPjB,MAAOiB,IAGX,OAAOD,EAGT,SAASG,EAAsBC,GAC7B,IAAMJ,EAAS,GASf,OARAI,EAAUC,QAAQ,SAAAC,GAChBN,EAAOE,KAAK,CACVvB,IAAK2B,EAAG3B,IACRC,MAAO0B,EAAG1B,MAEVI,MAAOsB,EAAGtB,OAASsB,EAAG1B,UAGnBoB,EAGT,IAAMO,EAAaV,EAAuB1B,EAAOI,QAASJ,EAAOK,SAC3DgC,EAAgBL,EAAsBhC,EAAOO,QAC7C+B,EAAuBN,EAAsBhC,EAAOY,gBACpD2B,EAAuBb,EAC3B1B,EAAOwB,mBACPxB,EAAOyB,2BCnBT,SAASe,EAAgBC,GACvB,OAAOA,EAAKC,IAAI,SAAAC,GAAG,OACjBC,EAAAC,EAAAC,cAAA,UAAQtC,IAAKmC,EAAInC,IAAKC,MAAOkC,EAAIlC,OAC9BkC,EAAI9B,aAqJIkC,6MA3IbC,MAAQ,CACNC,IAAKjD,EAAOG,YACZ+C,OAAQlD,EAAOM,eACf6C,cAAenD,EAAOW,uBACtByC,KAAMpD,EAAOc,aACbuC,IAAKrD,EAAOiB,mBACZqC,QAAStD,EAAOoB,uBAChBmC,cAAevD,EAAOuB,0BAGxBiC,OAAS,SAAAC,GAAK,OAAI,SAAAC,GAChBA,EAAIC,iBACJC,EAAKC,SAAL5D,OAAA6D,EAAA,EAAA7D,CAAA,GACGwD,EAAQC,EAAIK,OAAOtD,YAIxBuD,YAAc,SAAAC,GACZA,EAAMN,kBAENO,EADyBN,EAAKO,MAAtBD,cACKN,EAAKZ,gFAGX,IAAAoB,EASHC,KAAKrB,MAPPC,EAFKmB,EAELnB,IACAC,EAHKkB,EAGLlB,OACAC,EAJKiB,EAILjB,cACAC,EALKgB,EAKLhB,KACAC,EANKe,EAMLf,IACAC,EAPKc,EAOLd,QACAC,EARKa,EAQLb,cAEF,OACEX,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,cACb1B,EAAAC,EAAAC,cAAA,QAAMyB,SAAUF,KAAKL,aACnBpB,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,mBAAmBE,QAAQ,aAA5C,MAEE5B,EAAAC,EAAAC,cAAA,UACE2B,GAAG,YACHC,KAAK,YACLjE,MAAOwC,EACP0B,SAAUN,KAAKb,OAAO,OACtBc,UAAU,oBAET9B,EAAgBJ,KAIrBQ,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,mBAAmBE,QAAQ,gBAA5C,SAEE5B,EAAAC,EAAAC,cAAA,UACE2B,GAAG,eACHC,KAAK,eACLjE,MAAOyC,EACPyB,SAAUN,KAAKb,OAAO,UACtBc,UAAU,oBAET9B,EAAgBH,KAIrBO,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,mBAAmBE,QAAQ,uBAA5C,iBAEE5B,EAAAC,EAAAC,cAAA,UACE2B,GAAG,sBACHC,KAAK,sBACLjE,MAAO0C,EACPwB,SAAUN,KAAKb,OAAO,iBACtBc,UAAU,oBAET9B,EAAgBF,KAIrBM,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,mBAAmBE,QAAQ,QAA5C,aAEE5B,EAAAC,EAAAC,cAAA,SACE2B,GAAG,OACHG,KAAK,SACLF,KAAK,OACLjE,MAAO2C,EACPuB,SAAUN,KAAKb,OAAO,QACtBqB,IAAK7E,EAAOe,SACZ+D,IAAK9E,EAAOgB,SACZsD,UAAU,sBAId1B,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,mBAAmBE,QAAQ,OAA5C,yBAEE5B,EAAAC,EAAAC,cAAA,SACE2B,GAAG,MACHG,KAAK,SACLF,KAAK,MACLjE,MAAO4C,EACPsB,SAAUN,KAAKb,OAAO,OACtBqB,IAAK7E,EAAOkB,eACZ4D,IAAK9E,EAAOmB,eACZmD,UAAU,sBAId1B,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,mBAAmBE,QAAQ,WAA5C,iBAEE5B,EAAAC,EAAAC,cAAA,SACE2B,GAAG,UACHG,KAAK,SACLF,KAAK,UACLjE,MAAO6C,EACPqB,SAAUN,KAAKb,OAAO,WACtBqB,IAAK7E,EAAOqB,mBACZyD,IAAK9E,EAAOsB,mBACZgD,UAAU,sBAId1B,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,mBAAmBE,QAAQ,uBAA5C,iBAEE5B,EAAAC,EAAAC,cAAA,UACE2B,GAAG,sBACHC,KAAK,sBACLjE,MAAO8C,EACPoB,SAAUN,KAAKb,OAAO,iBACtBc,UAAU,oBAET9B,EAAgBD,KAIrBK,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,SAASN,UAAU,qBAAhC,+BAvIcS,oBCiBTC,MAJf,SAAmBb,GACjB,OAAOvB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,aAhCxB,SAAgBH,GAAO,IACbc,EAASd,EAATc,KACAC,EAAgCD,EAAhCC,cAAeC,EAAiBF,EAAjBE,aACvB,OAAID,GAAiBC,EAEjBvC,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,kBACb1B,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,yBAAf,iCACiCY,EAAcE,oBAE/CxC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,uBAAb,gDAGA1B,EAAAC,EAAAC,cAAA,+CAAuCoC,EAAcG,cACrDzC,EAAAC,EAAAC,cAAA,qCAA6BoC,EAAcI,YAC3C1C,EAAAC,EAAAC,cAAA,oCAA4BoC,EAAcK,WAC1C3C,EAAAC,EAAAC,cAAA,qCAA6BoC,EAAcM,sBAC3C5C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,uBAAb,+CAGA1B,EAAAC,EAAAC,cAAA,+CAAuCqC,EAAaE,cACpDzC,EAAAC,EAAAC,cAAA,qCAA6BqC,EAAaG,YAC1C1C,EAAAC,EAAAC,cAAA,oCAA4BqC,EAAaI,WACzC3C,EAAAC,EAAAC,cAAA,qCAA6BqC,EAAaK,uBAIzC5C,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,UAIamB,CAAOtB,sBCzB5C,SAASuB,EAAkBC,GACzB,OARsBzC,EAQAyC,EAAMzC,OAPrBlD,EAAOO,OAAOqF,KAAK,SAAAC,GAAE,OAAIA,EAAGrF,MAAQ0C,IAAQxC,eAObiF,EAAMpC,cAR9C,IAAwBL,EAexB,SAAS4C,EAAsCH,GAC7C,OAAOA,EAAMtC,IAAMsC,EAAMrC,QAL3B,SAAoBqC,GAClB,OAAOA,EAAMvC,KAAOsC,EAAkBC,GAIHI,CAAWJ,GAehD,SAASL,EAAWD,EAAclC,GAChC,IAAM6C,EATR,SAA8B7C,GAC5B,IAAItB,EAASoE,IAAUC,OAAOC,OAI9B,OAHIhD,IAAkBnD,EAAOW,yBAC3BkB,EAASoE,IAAUC,OAAOC,QAErBtE,EAIWuE,CAAqBjD,GACjCkD,EAAYJ,IAAUL,KAAKI,EAAWX,GAC5C,OAAOiB,WAAWD,EAAUE,OAAOC,KAGrC,SAASjB,EAAUkB,GACjB,OAAuB,GAAhBA,EAGT,SAASjB,EAAqBkB,EAAcC,GAC1C,OAAOD,EAAeC,EC1CxB,SAASC,EAAiBjB,GACxB,MAAO,CACL1C,IAAK4D,SAASlB,EAAM1C,IAAK,IACzBI,IAAKwD,SAASlB,EAAMtC,IAAK,IACzByD,OAAQD,SAASlB,EAAMmB,OAAQ,IAC/BxD,QAASuD,SAASlB,EAAMrC,QAAS,IACjCC,cAAesD,SAASlB,EAAMpC,cAAe,IAC7CH,KAAMyD,SAASlB,EAAMvC,KAAM,IAC3BF,OAAQyC,EAAMzC,OACdC,cAAewC,EAAMxC,eAKzB,SAAS4D,EAAiCC,GACxC,IAAMrB,EAAQiB,EAAiBI,GACzB3B,EDGR,SAAkDM,GAChD,OAAOA,EAAMtC,IAAMsC,EAAMrC,QCJJ2D,CAAkDtB,GACjEP,EAAqB6B,EAA2BtB,GAChDL,EAAa2B,EAAoB5B,EAAcM,EAAMxC,eACrDoC,EAAY0B,EAAmB3B,GAKrC,MAAO,CACLE,qBAL2ByB,EAC3B1B,EACAH,GAIAA,qBACAC,eACAC,aACAC,aAIJ,SAAS2B,EAAgCF,GACvC,IAAMrB,EAAQiB,EAAiBI,GACzB3B,EAAe4B,EAA+CtB,GAC9DP,EAAqB6B,EAA2BtB,GAChDL,EAAa2B,EAAoB5B,EAAcM,EAAMxC,eACrDoC,EAAY0B,EAAmB3B,GAKrC,MAAO,CACLE,qBAL2ByB,EAC3B1B,EACAH,GAIAA,qBACAC,eACAC,aACAC,aCvBW4B,MAtBf,WAAe,IAAAC,EACqBC,mBAAS,IAD9BC,EAAArH,OAAAsH,EAAA,EAAAtH,CAAAmH,EAAA,GACNI,EADMF,EAAA,GACKG,EADLH,EAAA,GAUb,OACE1E,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAAlB,yDAGA1B,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,iBAAd,eACA1B,EAAAC,EAAAC,cAAC4E,EAAD,CAAWxD,aAbM,SAAAyB,GACnB,IAAMgC,ED6CV,SAAahC,GACX,MAAO,CACLT,cAAe6B,EAAiCpB,GAChDR,aAAc+B,EAAgCvB,IChDvBiC,CAAIjC,GAC3B8B,EAAaE,GACbE,QAAQC,IAAI,uBAAwBnC,GACpCkC,QAAQC,IAAI,cAAeH,MAUzB/E,EAAAC,EAAAC,cAACiF,EAAD,CAAW9C,KAAMuC,MCXHQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.012e6331.chunk.js","sourcesContent":["const config = Object.freeze({\n  DEFAULT_AGE: 55,\n  MIN_AGE: 40,\n  MAX_AGE: 70,\n\n  // https://www.worldlifeexpectancy.com/canada-life-expectancy\n  DEFAULT_GENDER: 'female',\n  GENDER: [\n    { key: 'male', value: 'male', lifeExpectancy: 81 },\n    { key: 'female', value: 'female', lifeExpectancy: 85 },\n  ],\n\n  // Only single supported for now\n  DEFAULT_MARITAL_STATUS: 'single',\n  MARITAL_STATUS: [\n    { key: 'single', value: 'single', label: 'Single' },\n    // {\n    //   key: 'partner_oas',\n    //   value: 'partner_oas',\n    //   label: 'Spouse/common-law partner of someone who receives an OAS Pension',\n    // },\n    // {\n    //   key: 'partner_oas',\n    //   value: 'partner_oas',\n    //   label:\n    //     'Spouse/common-law partner of someone who does not receive an OAS Pension',\n    // },\n  ],\n\n  // Only needed when factoring in income tax - future\n  // DEFAULT_INCOME: 30000,\n  // MIN_INCOME: 0,\n  // MAX_INCOME: 100000,\n\n  DEFAULT_RRSP: 90000,\n  MIN_RRSP: 0,\n  MAX_RRSP: 1000000,\n\n  DEFAULT_ANNUAL_CPP: 9000,\n  MIN_ANNUAL_CPP: 0,\n  MAX_ANNUAL_CPP: 15000,\n\n  DEFAULT_ANNUAL_PENSION: 0,\n  MIN_ANNUAL_PENSION: 0,\n  MAX_ANNUAL_PENSION: 50000,\n\n  DEFAULT_RETIREMENT_AGE: 65,\n  MIN_RETIREMENT_AGE: 55,\n  MAX_RETIREMENT_AGE: 70,\n});\n\nexport default config;\n","import config from '../config';\n\nfunction generateNumericOptions(from, to) {\n  const result = [];\n  for (let i = from; i <= to; i += 1) {\n    result.push({\n      key: i,\n      value: i,\n      label: i,\n    });\n  }\n  return result;\n}\n\nfunction generateStringOptions(configKey) {\n  const result = [];\n  configKey.forEach(ck => {\n    result.push({\n      key: ck.key,\n      value: ck.value,\n      // TODO i18n\n      label: ck.label || ck.value,\n    });\n  });\n  return result;\n}\n\nconst ageOptions = generateNumericOptions(config.MIN_AGE, config.MAX_AGE);\nconst genderOptions = generateStringOptions(config.GENDER);\nconst martialStatusOptions = generateStringOptions(config.MARITAL_STATUS);\nconst retirementAgeOptions = generateNumericOptions(\n  config.MIN_RETIREMENT_AGE,\n  config.MAX_RETIREMENT_AGE\n);\n\nexport {\n  ageOptions,\n  genderOptions,\n  martialStatusOptions,\n  retirementAgeOptions,\n};\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nimport config from '../../config';\nimport {\n  ageOptions,\n  genderOptions,\n  martialStatusOptions,\n  retirementAgeOptions,\n} from '../../lib/options';\nimport './data-entry.css';\n\nfunction createSelection(opts) {\n  return opts.map(opt => (\n    <option key={opt.key} value={opt.value}>\n      {opt.label}\n    </option>\n  ));\n}\n\nclass DataEntry extends Component {\n  // static propTypes = {\n  //   runScenarios: PropTypes.func,\n  // };\n\n  state = {\n    age: config.DEFAULT_AGE,\n    gender: config.DEFAULT_GENDER,\n    maritalStatus: config.DEFAULT_MARITAL_STATUS,\n    rrsp: config.DEFAULT_RRSP,\n    cpp: config.DEFAULT_ANNUAL_CPP,\n    pension: config.DEFAULT_ANNUAL_PENSION,\n    retirementAge: config.DEFAULT_RETIREMENT_AGE,\n  };\n\n  update = field => evt => {\n    evt.preventDefault();\n    this.setState({\n      [field]: evt.target.value,\n    });\n  };\n\n  submitInput = event => {\n    event.preventDefault();\n    const { runScenarios } = this.props;\n    runScenarios(this.state);\n  };\n\n  render() {\n    const {\n      age,\n      gender,\n      maritalStatus,\n      rrsp,\n      cpp,\n      pension,\n      retirementAge,\n    } = this.state;\n    return (\n      <div className=\"data-entry\">\n        <form onSubmit={this.submitInput}>\n          <label className=\"data-entry-label\" htmlFor=\"selectAge\">\n            Age\n            <select\n              id=\"selectAge\"\n              name=\"selectAge\"\n              value={age}\n              onChange={this.update('age')}\n              className=\"data-entry-input\"\n            >\n              {createSelection(ageOptions)}\n            </select>\n          </label>\n\n          <label className=\"data-entry-label\" htmlFor=\"selectGender\">\n            Gender\n            <select\n              id=\"selectGender\"\n              name=\"selectGender\"\n              value={gender}\n              onChange={this.update('gender')}\n              className=\"data-entry-input\"\n            >\n              {createSelection(genderOptions)}\n            </select>\n          </label>\n\n          <label className=\"data-entry-label\" htmlFor=\"selectMaritalStatus\">\n            Marital Status\n            <select\n              id=\"selectMaritalStatus\"\n              name=\"selectMaritalStatus\"\n              value={maritalStatus}\n              onChange={this.update('maritalStatus')}\n              className=\"data-entry-input\"\n            >\n              {createSelection(martialStatusOptions)}\n            </select>\n          </label>\n\n          <label className=\"data-entry-label\" htmlFor=\"rrsp\">\n            Total RRSP\n            <input\n              id=\"rrsp\"\n              type=\"number\"\n              name=\"rrsp\"\n              value={rrsp}\n              onChange={this.update('rrsp')}\n              min={config.MIN_RRSP}\n              max={config.MAX_RRSP}\n              className=\"data-entry-input\"\n            />\n          </label>\n\n          <label className=\"data-entry-label\" htmlFor=\"cpp\">\n            Annual CPP Entitlement\n            <input\n              id=\"cpp\"\n              type=\"number\"\n              name=\"cpp\"\n              value={cpp}\n              onChange={this.update('cpp')}\n              min={config.MIN_ANNUAL_CPP}\n              max={config.MAX_ANNUAL_CPP}\n              className=\"data-entry-input\"\n            />\n          </label>\n\n          <label className=\"data-entry-label\" htmlFor=\"pension\">\n            Annual Pension\n            <input\n              id=\"pension\"\n              type=\"number\"\n              name=\"pension\"\n              value={pension}\n              onChange={this.update('pension')}\n              min={config.MIN_ANNUAL_PENSION}\n              max={config.MAX_ANNUAL_PENSION}\n              className=\"data-entry-input\"\n            />\n          </label>\n\n          <label className=\"data-entry-label\" htmlFor=\"selectRetirementAge\">\n            Retirement Age\n            <select\n              id=\"selectRetirementAge\"\n              name=\"selectRetirementAge\"\n              value={retirementAge}\n              onChange={this.update('retirementAge')}\n              className=\"data-entry-input\"\n            >\n              {createSelection(retirementAgeOptions)}\n            </select>\n          </label>\n\n          <button type=\"submit\" className=\"data-entry-submit\">\n            Compare my options\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default DataEntry;\n","import React from 'react';\nimport './scenarios.css';\n\nfunction helper(props) {\n  const { data } = props;\n  const { cashOutBefore, cashOutAfter } = data;\n  if (cashOutBefore && cashOutAfter) {\n    return (\n      <div className=\"scenarios-data\">\n        <div className=\"scenarios-data-common\">\n          Expected years in retirement: {cashOutBefore.numYrsInRetirement}\n        </div>\n        <br />\n        <p className=\"scenarios-subheader\">\n          If you cash out your RRSP BEFORE retirement:\n        </p>\n        <p>Annual income for GIS eligibility: {cashOutBefore.annualIncome}</p>\n        <p>Monthly GIS entitlement: {cashOutBefore.monthlyGis}</p>\n        <p>Annual GIS entitlement: {cashOutBefore.annualGIS}</p>\n        <p>Total GIS in retirement: {cashOutBefore.totalGisInRetirement}</p>\n        <br />\n        <p className=\"scenarios-subheader\">\n          If you cash out your RRSP AFTER retirement:\n        </p>\n        <p>Annual income for GIS eligibility: {cashOutAfter.annualIncome}</p>\n        <p>Monthly GIS entitlement: {cashOutAfter.monthlyGis}</p>\n        <p>Annual GIS entitlement: {cashOutAfter.annualGIS}</p>\n        <p>Total GIS in retirement: {cashOutAfter.totalGisInRetirement}</p>\n      </div>\n    );\n  }\n  return <div className=\"empty\" />;\n}\n\nfunction Scenarios(props) {\n  return <div className=\"scenarios\">{helper(props)}</div>;\n}\n\nexport default Scenarios;\n","import gisLookup from 'gis-lookup';\nimport config from '../config';\n\nfunction lifeExpectancy(gender) {\n  return config.GENDER.find(el => el.key === gender).lifeExpectancy;\n}\nfunction yearsBeforeRetirement(input) {\n  return input.retirementAge - input.age;\n}\n\nfunction yearsInRetirement(input) {\n  return lifeExpectancy(input.gender) - input.retirementAge;\n}\n\nfunction annualRrsp(input) {\n  return input.rrsp / yearsInRetirement(input);\n}\n\nfunction annualIncomeForGisEligibilityWithRrsp(input) {\n  return input.cpp + input.pension + annualRrsp(input);\n}\n\nfunction annualIncomeForGisEligibilityWithoutRrsp(input) {\n  return input.cpp + input.pension;\n}\n\nfunction convertMaritalStatus(maritalStatus) {\n  let result = gisLookup.STATUS.SINGLE;\n  if (maritalStatus === config.DEFAULT_MARITAL_STATUS) {\n    result = gisLookup.STATUS.SINGLE;\n  }\n  return result;\n}\n\nfunction monthlyGis(annualIncome, maritalStatus) {\n  const gisStatus = convertMaritalStatus(maritalStatus);\n  const gisResult = gisLookup.find(gisStatus, annualIncome);\n  return parseFloat(gisResult.output.gis);\n}\n\nfunction annualGIS(monthlyGisAmt) {\n  return monthlyGisAmt * 12;\n}\n\nfunction totalGisInRetirement(annualGISAmt, numYearsInRetirement) {\n  return annualGISAmt * numYearsInRetirement;\n}\n\nexport {\n  yearsBeforeRetirement,\n  yearsInRetirement,\n  annualIncomeForGisEligibilityWithRrsp,\n  annualIncomeForGisEligibilityWithoutRrsp,\n  monthlyGis,\n  annualGIS,\n  totalGisInRetirement,\n};\n","import * as calcUtil from './calc-util';\n\n// should be a better way to get these as numeric from html form\nfunction convertToNumeric(input) {\n  return {\n    age: parseInt(input.age, 10),\n    cpp: parseInt(input.cpp, 10),\n    income: parseInt(input.income, 10),\n    pension: parseInt(input.pension, 10),\n    retirementAge: parseInt(input.retirementAge, 10),\n    rrsp: parseInt(input.rrsp, 10),\n    gender: input.gender,\n    maritalStatus: input.maritalStatus,\n  };\n}\n\n// TODO extract common calcs between scenarios\nfunction calculateCashOutBeforeRetirement(inp) {\n  const input = convertToNumeric(inp);\n  const annualIncome = calcUtil.annualIncomeForGisEligibilityWithoutRrsp(input);\n  const numYrsInRetirement = calcUtil.yearsInRetirement(input);\n  const monthlyGis = calcUtil.monthlyGis(annualIncome, input.maritalStatus);\n  const annualGIS = calcUtil.annualGIS(monthlyGis);\n  const totalGisInRetirement = calcUtil.totalGisInRetirement(\n    annualGIS,\n    numYrsInRetirement\n  );\n  return {\n    totalGisInRetirement,\n    numYrsInRetirement,\n    annualIncome,\n    monthlyGis,\n    annualGIS,\n  };\n}\n\nfunction calculateCashOutAfterRetirement(inp) {\n  const input = convertToNumeric(inp);\n  const annualIncome = calcUtil.annualIncomeForGisEligibilityWithRrsp(input);\n  const numYrsInRetirement = calcUtil.yearsInRetirement(input);\n  const monthlyGis = calcUtil.monthlyGis(annualIncome, input.maritalStatus);\n  const annualGIS = calcUtil.annualGIS(monthlyGis);\n  const totalGisInRetirement = calcUtil.totalGisInRetirement(\n    annualGIS,\n    numYrsInRetirement\n  );\n  return {\n    totalGisInRetirement,\n    numYrsInRetirement,\n    annualIncome,\n    monthlyGis,\n    annualGIS,\n  };\n}\n\nfunction run(input) {\n  return {\n    cashOutBefore: calculateCashOutBeforeRetirement(input),\n    cashOutAfter: calculateCashOutAfterRetirement(input),\n  };\n}\n\nexport { run };\n","import React, { useState } from 'react';\nimport './App.css';\nimport DataEntry from './components/data-entry/data-entry';\nimport Scenarios from './components/scenarios/scenarios';\nimport { run } from './lib/scenario-runner';\n\nfunction App() {\n  const [scenarios, setScenarios] = useState({});\n\n  const runScenarios = input => {\n    const scenarioResult = run(input);\n    setScenarios(scenarioResult);\n    console.log('Run scenarios for %o', input);\n    console.log('Result = %o', scenarioResult);\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        Should I cash out my RRSP before or after retirement?\n      </header>\n      <h1 className=\"app-prototype\">(Prototype)</h1>\n      <DataEntry runScenarios={runScenarios} />\n      <Scenarios data={scenarios} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}